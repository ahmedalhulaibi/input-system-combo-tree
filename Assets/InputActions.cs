//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""c44ced90-5133-4923-b935-717b28a97543"",
            ""actions"": [
                {
                    ""name"": ""Light Attack"",
                    ""type"": ""Button"",
                    ""id"": ""680fa154-670f-4d98-b8a0-b11734e029aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Heavy Attack"",
                    ""type"": ""Button"",
                    ""id"": ""4162b0aa-3d3e-43cf-bd93-38736efe1922"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""33c5b1d1-3b62-4be8-86de-cf2c0ce402c5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Light Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb927bc5-d3f8-408c-af60-bef7daba9386"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Heavy Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Combos"",
            ""id"": ""c090f87a-0f30-4d1f-9d1b-6720bd6d73cb"",
            ""actions"": [
                {
                    ""name"": ""special_1"",
                    ""type"": ""Button"",
                    ""id"": ""51634270-ad54-44b3-add5-6f1a367a1ae6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""special_2"",
                    ""type"": ""Button"",
                    ""id"": ""95fc8c26-7ebd-45c4-962c-b894c3170ca4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""special_3"",
                    ""type"": ""Button"",
                    ""id"": ""2948db6d-8b82-4805-b905-4e79895f1feb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""caf8f7a5-0431-446d-a15a-d20f60160221"",
                    ""path"": ""<SimulatedComboDevice>/special_1_comboButton0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""special_1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88a9ec19-a8d6-48c5-8a63-46454b238f8d"",
                    ""path"": ""<SimulatedComboDevice>/special_2_comboButton1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""special_2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8635ae8e-662f-43d6-b97e-84b45f8b7ddb"",
                    ""path"": ""<SimulatedComboDevice>/special_3_comboButton2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""special_3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_LightAttack = m_Player.FindAction("Light Attack", throwIfNotFound: true);
        m_Player_HeavyAttack = m_Player.FindAction("Heavy Attack", throwIfNotFound: true);
        // Combos
        m_Combos = asset.FindActionMap("Combos", throwIfNotFound: true);
        m_Combos_special_1 = m_Combos.FindAction("special_1", throwIfNotFound: true);
        m_Combos_special_2 = m_Combos.FindAction("special_2", throwIfNotFound: true);
        m_Combos_special_3 = m_Combos.FindAction("special_3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_LightAttack;
    private readonly InputAction m_Player_HeavyAttack;
    public struct PlayerActions
    {
        private @InputActions m_Wrapper;
        public PlayerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LightAttack => m_Wrapper.m_Player_LightAttack;
        public InputAction @HeavyAttack => m_Wrapper.m_Player_HeavyAttack;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @LightAttack.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLightAttack;
                @LightAttack.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLightAttack;
                @LightAttack.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLightAttack;
                @HeavyAttack.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHeavyAttack;
                @HeavyAttack.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHeavyAttack;
                @HeavyAttack.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHeavyAttack;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LightAttack.started += instance.OnLightAttack;
                @LightAttack.performed += instance.OnLightAttack;
                @LightAttack.canceled += instance.OnLightAttack;
                @HeavyAttack.started += instance.OnHeavyAttack;
                @HeavyAttack.performed += instance.OnHeavyAttack;
                @HeavyAttack.canceled += instance.OnHeavyAttack;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Combos
    private readonly InputActionMap m_Combos;
    private ICombosActions m_CombosActionsCallbackInterface;
    private readonly InputAction m_Combos_special_1;
    private readonly InputAction m_Combos_special_2;
    private readonly InputAction m_Combos_special_3;
    public struct CombosActions
    {
        private @InputActions m_Wrapper;
        public CombosActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @special_1 => m_Wrapper.m_Combos_special_1;
        public InputAction @special_2 => m_Wrapper.m_Combos_special_2;
        public InputAction @special_3 => m_Wrapper.m_Combos_special_3;
        public InputActionMap Get() { return m_Wrapper.m_Combos; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombosActions set) { return set.Get(); }
        public void SetCallbacks(ICombosActions instance)
        {
            if (m_Wrapper.m_CombosActionsCallbackInterface != null)
            {
                @special_1.started -= m_Wrapper.m_CombosActionsCallbackInterface.OnSpecial_1;
                @special_1.performed -= m_Wrapper.m_CombosActionsCallbackInterface.OnSpecial_1;
                @special_1.canceled -= m_Wrapper.m_CombosActionsCallbackInterface.OnSpecial_1;
                @special_2.started -= m_Wrapper.m_CombosActionsCallbackInterface.OnSpecial_2;
                @special_2.performed -= m_Wrapper.m_CombosActionsCallbackInterface.OnSpecial_2;
                @special_2.canceled -= m_Wrapper.m_CombosActionsCallbackInterface.OnSpecial_2;
                @special_3.started -= m_Wrapper.m_CombosActionsCallbackInterface.OnSpecial_3;
                @special_3.performed -= m_Wrapper.m_CombosActionsCallbackInterface.OnSpecial_3;
                @special_3.canceled -= m_Wrapper.m_CombosActionsCallbackInterface.OnSpecial_3;
            }
            m_Wrapper.m_CombosActionsCallbackInterface = instance;
            if (instance != null)
            {
                @special_1.started += instance.OnSpecial_1;
                @special_1.performed += instance.OnSpecial_1;
                @special_1.canceled += instance.OnSpecial_1;
                @special_2.started += instance.OnSpecial_2;
                @special_2.performed += instance.OnSpecial_2;
                @special_2.canceled += instance.OnSpecial_2;
                @special_3.started += instance.OnSpecial_3;
                @special_3.performed += instance.OnSpecial_3;
                @special_3.canceled += instance.OnSpecial_3;
            }
        }
    }
    public CombosActions @Combos => new CombosActions(this);
    public interface IPlayerActions
    {
        void OnLightAttack(InputAction.CallbackContext context);
        void OnHeavyAttack(InputAction.CallbackContext context);
    }
    public interface ICombosActions
    {
        void OnSpecial_1(InputAction.CallbackContext context);
        void OnSpecial_2(InputAction.CallbackContext context);
        void OnSpecial_3(InputAction.CallbackContext context);
    }
}
